{"ast":null,"code":"var _jsxFileName = \"/Users/taylorsimpson/Documents/react/song-analysis/client/src/components/SongInfo.js\";\nimport React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass SongInfo extends Component {\n  constructor() {\n    super();\n\n    this.getHashParams = () => {\n      var hashParams = {};\n      var e,\n          r = /([^&;=]+)=?([^&;]*)/g,\n          q = window.location.hash.substring(1);\n      e = r.exec(q);\n\n      while (e) {\n        hashParams[e[1]] = decodeURIComponent(e[2]);\n        e = r.exec(q);\n      }\n\n      return hashParams;\n    };\n\n    this.getNowPlaying = () => {\n      spotifyApi.getMyCurrentPlaybackState().then(response => {\n        const _response$item = response.item,\n              _response$item$name = _response$item.name,\n              name = _response$item$name === void 0 ? \"nn\" : _response$item$name,\n              _response$item$album = _response$item.album,\n              album = _response$item$album === void 0 ? \"na\" : _response$item$album,\n              _response$item$artist = _response$item.artists,\n              artists = _response$item$artist === void 0 ? \"naa\" : _response$item$artist;\n        this.setState({\n          currentlyPlaying: true,\n          nowPlaying: {\n            name: name,\n            albumArt: album.images[0].url,\n            artist: artists[0].name,\n            releaseDate: album.release_date\n          }\n        });\n        console.log('song playing', this.state.currentlyPlaying);\n      }).catch(() => this.setState({\n        currentlyPlaying: false\n      }));\n    };\n\n    this.formatReleaseDate = date => {\n      let selectMonth = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n      let month = selectMonth[parseInt(date.slice(5, 7) - 1)];\n      let day = date.slice(8, 10);\n      let year = date.slice(0, 4);\n      return month + \" \" + day + \", \" + year;\n    };\n\n    this.getWiki = term => {\n      const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n      const url = \"https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro&explaintext&redirects=1&titles=\";\n      fetch(proxyurl + url + term) // https://cors-anywhere.herokuapp.com/https://example.com\n      .then(response => response.json()).then(contents => {\n        for (const key in contents.query.pages) {\n          const extract = contents.query.pages[key].extract;\n          this.setState({\n            description: contents.query\n          });\n        }\n      }).catch(() => console.log(\"Canâ€™t access \" + url + term + \" response. Blocked by browser?\"));\n    };\n\n    const params = this.getHashParams();\n    const token = params.access_token;\n\n    if (token) {\n      spotifyApi.setAccessToken(token);\n    }\n\n    this.state = {\n      loggedIn: token ? true : false,\n      currentlyPlaying: false,\n      nowPlaying: {\n        name: '',\n        artist: '',\n        albumArt: '',\n        releaseDate: ''\n      },\n      description: ''\n    };\n  } //Function given in Spotify API used to create a random hash for the access token\n\n\n  componentDidMount() {\n    this.getNowPlaying();\n  }\n\n  render() {\n    const _this$state$nowPlayin = this.state.nowPlaying,\n          name = _this$state$nowPlayin.name,\n          artist = _this$state$nowPlayin.artist,\n          albumArt = _this$state$nowPlayin.albumArt,\n          releaseDate = _this$state$nowPlayin.releaseDate;\n    return React.createElement(\"div\", {\n      className: \"songInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, !this.state.currentlyPlaying && this.state.loggedIn ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"No music playing\") : '', !this.state.loggedIn && React.createElement(\"a\", {\n      href: \"http://localhost:8888\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \" Login to Spotify \"), this.state.loggedIn && this.state.currentlyPlaying && React.createElement(\"button\", {\n      id: \"spotify-button\",\n      onClick: () => this.getNowPlaying(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Check Now Playing\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, name && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Now Playing: \", name)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, artist && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Artist: \", artist)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, albumArt && React.createElement(\"img\", {\n      src: albumArt,\n      alt: \"Album art not found\",\n      style: {\n        height: 150\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, releaseDate && this.formatReleaseDate(releaseDate)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, artist && React.createElement(\"button\", {\n      className: \"description-button\",\n      onClick: () => this.getWiki(artist),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Artist Description\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \" \", this.state.description)));\n  }\n\n}\n\nexport default SongInfo;","map":{"version":3,"sources":["/Users/taylorsimpson/Documents/react/song-analysis/client/src/components/SongInfo.js"],"names":["React","Component","SpotifyWebApi","spotifyApi","SongInfo","constructor","getHashParams","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","getNowPlaying","getMyCurrentPlaybackState","then","response","item","name","album","artists","setState","currentlyPlaying","nowPlaying","albumArt","images","url","artist","releaseDate","release_date","console","log","state","catch","formatReleaseDate","date","selectMonth","month","parseInt","slice","day","year","getWiki","term","proxyurl","fetch","json","contents","key","query","pages","extract","description","params","token","access_token","setAccessToken","loggedIn","componentDidMount","render","height"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\n\n\nclass SongInfo extends Component {\n    constructor() {\n        super();\n        const params = this.getHashParams();\n        const token = params.access_token;\n        if (token) {\n            spotifyApi.setAccessToken(token);\n        }\n\n        this.state = {\n            loggedIn: token ? true : false,\n            currentlyPlaying: false,\n            nowPlaying: {\n                name: '',\n                artist: '',\n                albumArt: '',\n                releaseDate: ''\n            },\n            description: ''\n        }\n    }\n\n    //Function given in Spotify API used to create a random hash for the access token\n    getHashParams = () => {\n        var hashParams = {};\n        var e, r = /([^&;=]+)=?([^&;]*)/g,\n            q = window.location.hash.substring(1);\n        e = r.exec(q)\n        while (e) {\n            hashParams[e[1]] = decodeURIComponent(e[2]);\n            e = r.exec(q);\n        }\n        return hashParams;\n    }\n\n    //Setting the state of the current song details from the Spotify API\n    getNowPlaying = () => {\n        spotifyApi.getMyCurrentPlaybackState()\n            .then((response) => {\n                const { name = \"nn\", album = \"na\", artists = \"naa\" } = response.item;\n                this.setState({\n                    currentlyPlaying: true,\n                    nowPlaying: {\n                        name: name,\n                        albumArt: album.images[0].url,\n                        artist: artists[0].name,\n                        releaseDate: album.release_date\n                    }\n                })\n                console.log('song playing', this.state.currentlyPlaying)\n            }).catch(() => (this.setState({\n                currentlyPlaying: false\n            })));\n    }\n\n    //Formatting the realse date from dd/mm/yyyy to mm dd, yyyy \n    formatReleaseDate = (date) => {\n        let selectMonth = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n        let month = selectMonth[parseInt(date.slice(5, 7) - 1)]\n        let day = date.slice(8, 10)\n        let year = date.slice(0, 4)\n        return month + \" \" + day + \", \" + year;\n    }\n\n    // Takes in an artist name as a search term and uses the \n    // Wikipedia API to get a JSON response of a description\n\n    getWiki = (term) => {\n        const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n        const url = \"https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro&explaintext&redirects=1&titles=\"\n        fetch(proxyurl + url + term) // https://cors-anywhere.herokuapp.com/https://example.com\n            .then(response => response.json())\n            .then(contents => {\n                for (const key in contents.query.pages) {\n                    const extract = contents.query.pages[key].extract;\n                    this.setState({\n                        description: contents.query\n                    });\n                }\n\n            }).catch(() => console.log(\"Canâ€™t access \" + url + term + \" response. Blocked by browser?\"))\n    }\n\n    componentDidMount() {\n        this.getNowPlaying();\n    }\n\n\n\n    render() {\n        const { name, artist, albumArt, releaseDate } = this.state.nowPlaying;\n        return (\n            <div className=\"songInfo\" >\n\n                {!this.state.currentlyPlaying && this.state.loggedIn ? <p>No music playing</p> : ''}\n\n                {!this.state.loggedIn && <a href='http://localhost:8888' > Login to Spotify </a>}\n\n                {this.state.loggedIn && this.state.currentlyPlaying &&\n                    <button\n                        id=\"spotify-button\"\n                        onClick={() => this.getNowPlaying()}>\n                        Check Now Playing\n                    </button>\n                }\n\n                {/* Song name */}\n                <div>\n                    {name && <p>Now Playing: {name}</p>}\n                </div>\n\n                {/* Artist name */}\n                <div>\n                    {artist && <p>Artist: {artist}</p>}\n                </div>\n\n                {/* Checking to see if there is alubm art and then rendering it if true*/}\n                <div>\n                    {albumArt && <img src={albumArt} alt=\"Album art not found\" style={{ height: 150 }} />}\n                </div>\n\n                {/* Function call to format the realse date from dd/mm/yyyy to mm dd, yyyy */}\n                {/* && used to only show a date when it is available */}\n                <div>\n                    {releaseDate && this.formatReleaseDate(releaseDate)}\n                </div>\n\n                {/* Calling a function to get the artist descriptoino form Wikipedia */}\n                <div>\n                    {artist &&\n                        <button\n                            className=\"description-button\"\n                            onClick={() => this.getWiki(artist)}>\n                            Artist Description\n                        </button>\n                    }\n                </div>\n\n                {/* Rendering description */}\n                <div>\n                    <p className=\"description\"> {this.state.description}</p>\n                </div>\n            </div>\n        );\n    }\n}\nexport default SongInfo;"]},"metadata":{},"sourceType":"module"}