{"ast":null,"code":"var _jsxFileName = \"/Users/taylorsimpson/Documents/react/song-analysis/client/src/App.js\";\nimport React, { Component } from 'react';\nimport './SongInfo.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi(); // Wikipedia API link\n\nconst searchUrl = \"https://en.wikipedia.org/w/api.php?action=opensearch&limit=20&format=json&search=\";\n\nclass App extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(Header, {\n      title: \"Song Analysis App\",\n      subtitle: \"Learn about the song you are currently listening to.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }), React.createElement(SongInfo, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }));\n  }\n\n}\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, this.props.title), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, this.props.subtitle));\n  }\n\n}\n\nclass SongInfo extends Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    const token = params.access_token;\n\n    if (token) {\n      spotifyApi.setAccessToken(token);\n    }\n\n    this.state = {\n      loggedIn: token ? true : false,\n      nowPlaying: {\n        name: '',\n        artist: '',\n        albumArt: '',\n        releaseDate: ''\n      }\n    };\n  } //Function given in Spotify API used to create a random hash for the access token\n\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    e = r.exec(q);\n\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n\n    return hashParams;\n  } //Setting the state of the current song details from the Spotify API\n\n\n  getNowPlaying() {\n    spotifyApi.getMyCurrentPlaybackState().then(response => {\n      this.setState({\n        nowPlaying: {\n          name: response.item.name,\n          albumArt: response.item.album.images[0].url,\n          artist: response.item.artists[0].name,\n          releaseDate: response.item.album.release_date\n        }\n      });\n    });\n  } //Formatting the realse date from dd/mm/yyyy to mm dd, yyyy \n\n\n  formatReleaseDate(date) {\n    let selectMonth = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let month = selectMonth[parseInt(date.slice(5, 7) - 1)];\n    let day = date.slice(8, 10);\n    let year = date.slice(0, 4);\n    return month + \" \" + day + \", \" + year;\n  } // Takes in an artist name as a search term and uses the \n  // Wikipedia API to get a JSON response of a description\n\n\n  getWiki(term) {\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    fetch(proxyurl + searchUrl + \"/\" + term).then(response => response.json()).then(contents => {\n      console.log(\"contents\" + contents[0]);\n    }).catch(() => console.log(\"Canâ€™t access \" + searchUrl + \" response. Blocked by browser?\"));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"songInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, !this.state.loggedIn && React.createElement(\"a\", {\n      href: \"http://localhost:8888\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \" Login to Spotify \"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, this.state.nowPlaying.name && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Now Playing: \", this.state.nowPlaying.name)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, this.state.nowPlaying.artist && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Artist: \", this.state.nowPlaying.artist)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, this.state.nowPlaying.albumArt && React.createElement(\"img\", {\n      src: this.state.nowPlaying.albumArt,\n      alt: \"Album art not found\",\n      style: {\n        height: 150\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, this.state.nowPlaying.releaseDate && this.formatReleaseDate(this.state.nowPlaying.releaseDate)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, console.log(this.getWiki(this.state.nowPlaying.artist))), this.state.loggedIn && React.createElement(\"button\", {\n      id: \"spotify-button\",\n      onClick: () => this.getNowPlaying(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Check Now Playing\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/taylorsimpson/Documents/react/song-analysis/client/src/App.js"],"names":["React","Component","SpotifyWebApi","spotifyApi","searchUrl","App","render","Header","constructor","props","title","subtitle","SongInfo","params","getHashParams","token","access_token","setAccessToken","state","loggedIn","nowPlaying","name","artist","albumArt","releaseDate","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","getNowPlaying","getMyCurrentPlaybackState","then","response","setState","item","album","images","url","artists","release_date","formatReleaseDate","date","selectMonth","month","parseInt","slice","day","year","getWiki","term","proxyurl","fetch","json","contents","console","log","catch","height"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './SongInfo.css';\n\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\n// Wikipedia API link\nconst searchUrl = \"https://en.wikipedia.org/w/api.php?action=opensearch&limit=20&format=json&search=\";\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Header title=\"Song Analysis App\" subtitle=\"Learn about the song you are currently listening to.\" />\n        <SongInfo />\n      </div>\n    );\n  }\n}\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n  render() {\n    return (\n      <div>\n        <h1>{this.props.title}</h1>\n        <p>{this.props.subtitle}</p>\n      </div>\n    );\n  }\n}\n\nclass SongInfo extends Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    const token = params.access_token;\n    if (token) {\n      spotifyApi.setAccessToken(token);\n    }\n    this.state = {\n      loggedIn: token ? true : false,\n      nowPlaying: {\n        name: '',\n        artist: '',\n        albumArt: '',\n        releaseDate: ''\n      }\n    }\n  }\n\n  //Function given in Spotify API used to create a random hash for the access token\n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    e = r.exec(q)\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n    return hashParams;\n  }\n\n  //Setting the state of the current song details from the Spotify API\n  getNowPlaying() {\n    spotifyApi.getMyCurrentPlaybackState()\n      .then((response) => {\n        this.setState({\n          nowPlaying: {\n            name: response.item.name,\n            albumArt: response.item.album.images[0].url,\n            artist: response.item.artists[0].name,\n            releaseDate: response.item.album.release_date\n          }\n        });\n      })\n  }\n\n  //Formatting the realse date from dd/mm/yyyy to mm dd, yyyy \n  formatReleaseDate(date) {\n    let selectMonth = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n      \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n    let month = selectMonth[parseInt(date.slice(5, 7) - 1)]\n    let day = date.slice(8, 10)\n    let year = date.slice(0, 4)\n    return month + \" \" + day + \", \" + year;\n  }\n\n  // Takes in an artist name as a search term and uses the \n  // Wikipedia API to get a JSON response of a description\n  getWiki(term) {\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    fetch(proxyurl + searchUrl + \"/\" + term)\n      .then(response => response.json())\n      .then(contents => {\n        console.log(\"contents\" + contents[0])\n      }\n\n      )\n      .catch(() => console.log(\"Canâ€™t access \" + searchUrl + \" response. Blocked by browser?\"))\n\n  }\n\n  render() {\n    return (\n      <div className=\"songInfo\" >\n\n        {!this.state.loggedIn && <a href='http://localhost:8888' > Login to Spotify </a>}\n\n        {/* Song name */}\n        <div>\n          {this.state.nowPlaying.name && <p>Now Playing: {this.state.nowPlaying.name}</p>}\n        </div>\n\n        {/* Artist name */}\n        <div>\n          {this.state.nowPlaying.artist && <p>Artist: {this.state.nowPlaying.artist}</p>}\n        </div>\n\n        {/* Checking to see if there is alubm art and then rendering it if true*/}\n        <div>\n          {this.state.nowPlaying.albumArt && <img src={this.state.nowPlaying.albumArt} alt=\"Album art not found\" style={{ height: 150 }} />}\n        </div>\n\n        {/* Function call to format the realse date from dd/mm/yyyy to mm dd, yyyy */}\n        {/* && used to only show a date when it is available*/}\n        <div>\n          {this.state.nowPlaying.releaseDate && this.formatReleaseDate(this.state.nowPlaying.releaseDate)}\n        </div>\n\n        {/* Calling a function to get the artist descriptoino form Wikipedia */}\n        <div>\n          {console.log(this.getWiki(this.state.nowPlaying.artist))}\n        </div>\n\n        {/* Rendering description */}\n        {/*<div>\n          {this.state.description()}\n        </div>*/}\n\n        {this.state.loggedIn &&\n          <button id=\"spotify-button\" onClick={() => this.getNowPlaying()}>\n            Check Now Playing\n          </button>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}