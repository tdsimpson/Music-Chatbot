{"ast":null,"code":"var _jsxFileName = \"/Users/taylorsimpson/Documents/react/music-chatbot/client/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi(); //let searchUrl = 'https://en.wikipedia.org/w/api.php?action=opensearch&format=json&search=';\n\nclass App extends Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    const token = params.access_token;\n\n    if (token) {\n      spotifyApi.setAccessToken(token);\n    }\n\n    this.state = {\n      loggedIn: token ? true : false,\n      nowPlaying: {\n        name: 'Not Checked',\n        artist: '',\n        albumArt: '',\n        releaseDate: ''\n      },\n      items: [],\n      isLoaded: false\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/todos/1').then(response => response.json()).then(json => {\n      this.setState({\n        isLoaded: true,\n        items: json\n      });\n    });\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    e = r.exec(q);\n\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n\n    return hashParams;\n  }\n\n  getNowPlaying() {\n    spotifyApi.getMyCurrentPlaybackState().then(response => {\n      this.setState({\n        nowPlaying: {\n          name: response.item.name,\n          albumArt: response.item.album.images[0].url,\n          artist: response.item.artists[0].name,\n          releaseDate: response.item.album.release_date\n        }\n      });\n    });\n  }\n\n  formatReleaseDate(date) {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let selectedMonthName = months[parseInt(date.slice(5, 7) - 1)];\n    return selectedMonthName + \" \" + date.slice(8, 10) + \", \" + date.slice(0, 4);\n  } // goWiki(term) {\n  //   let url = searchUrl + term;\n  //   fetch(url)\n  //     .then((response) => {\n  //       return response.json()\n  //     })\n  // }\n\n\n  render() {\n    // let { isLoaded, items } = this.state;\n    // if (!isLoaded) {\n    //   return <div> Loading...</div>;\n    // }\n    // else {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"http://localhost:8888\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \" Login to Spotify \"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Now Playing: \", this.state.nowPlaying.name), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Artist: \", this.state.nowPlaying.artist), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.nowPlaying.albumArt,\n      alt: \"Album art not found\",\n      style: {\n        height: 150\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, this.formatReleaseDate(this.state.nowPlaying.releaseDate)), this.state.loggedIn && React.createElement(\"button\", {\n      onClick: () => this.getNowPlaying(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Check Now Playing\"));\n  }\n\n} //}\n\n\nexport default App;","map":{"version":3,"sources":["/Users/taylorsimpson/Documents/react/music-chatbot/client/src/App.js"],"names":["React","Component","SpotifyWebApi","spotifyApi","App","constructor","params","getHashParams","token","access_token","setAccessToken","state","loggedIn","nowPlaying","name","artist","albumArt","releaseDate","items","isLoaded","componentDidMount","fetch","then","response","json","setState","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","getNowPlaying","getMyCurrentPlaybackState","item","album","images","url","artists","release_date","formatReleaseDate","date","months","selectedMonthName","parseInt","slice","render","height"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\n//let searchUrl = 'https://en.wikipedia.org/w/api.php?action=opensearch&format=json&search=';\n\nclass App extends Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    const token = params.access_token;\n    if (token) {\n      spotifyApi.setAccessToken(token);\n    }\n    this.state = {\n      loggedIn: token ? true : false,\n      nowPlaying: { name: 'Not Checked', artist: '', albumArt: '', releaseDate: '' },\n      items: [],\n      isLoaded: false\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/todos/1')\n      .then(response => response.json())\n      .then(json => {\n        this.setState({\n          isLoaded: true,\n          items: json,\n        })\n      });\n  }\n\n\n\n\n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    e = r.exec(q)\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n    return hashParams;\n  }\n\n  getNowPlaying() {\n    spotifyApi.getMyCurrentPlaybackState()\n      .then((response) => {\n        this.setState({\n          nowPlaying: {\n            name: response.item.name,\n            albumArt: response.item.album.images[0].url,\n            artist: response.item.artists[0].name,\n            releaseDate: response.item.album.release_date\n          }\n        });\n      })\n  }\n\n  formatReleaseDate(date) {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n      \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n    let selectedMonthName = months[parseInt(date.slice(5, 7) - 1)]\n    return selectedMonthName + \" \" + date.slice(8, 10) + \", \" + date.slice(0, 4);\n  }\n\n  // goWiki(term) {\n  //   let url = searchUrl + term;\n  //   fetch(url)\n  //     .then((response) => {\n  //       return response.json()\n  //     })\n  // }\n\n\n  render() {\n    // let { isLoaded, items } = this.state;\n    // if (!isLoaded) {\n    //   return <div> Loading...</div>;\n    // }\n    // else {\n    return (\n      <div className=\"App\" >\n        <a href='http://localhost:8888' > Login to Spotify </a>\n        <div>\n          Now Playing: {this.state.nowPlaying.name}\n        </div>\n        <div>\n          Artist: {this.state.nowPlaying.artist}\n        </div>\n        <div>\n          <img src={this.state.nowPlaying.albumArt} alt=\"Album art not found\" style={{ height: 150 }} />\n        </div>\n        <div>\n          {this.formatReleaseDate(this.state.nowPlaying.releaseDate)}\n        </div>\n\n        {/* <div>\n          {this.goWiki(this.state.nowPlaying.artist)}\n        </div> */}\n\n        {this.state.loggedIn &&\n          <button onClick={() => this.getNowPlaying()}>\n            Check Now Playing\n          </button>\n        }\n      </div >\n    );\n  }\n}\n//}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}