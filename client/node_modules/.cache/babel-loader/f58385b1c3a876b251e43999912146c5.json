{"ast":null,"code":"var _jsxFileName = \"/Users/taylorsimpson/Documents/react/song-analysis/client/src/components/SongInfo.js\";\nimport React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi(); // Wikipedia API link\n\nconst searchUrl = \"https://en.wikipedia.org/w/api.php?action=opensearch&limit=20&format=json&search=\";\n\nclass SongInfo extends Component {\n  constructor() {\n    super();\n\n    this.getHashParams = () => {\n      var hashParams = {};\n      var e,\n          r = /([^&;=]+)=?([^&;]*)/g,\n          q = window.location.hash.substring(1);\n      e = r.exec(q);\n\n      while (e) {\n        hashParams[e[1]] = decodeURIComponent(e[2]);\n        e = r.exec(q);\n      }\n\n      return hashParams;\n    };\n\n    this.getNowPlaying = () => {\n      spotifyApi.getMyCurrentPlaybackState().then(response => {\n        this.setState({\n          nowPlaying: {\n            name: response.item.name,\n            albumArt: response.item.album.images[0].url,\n            artist: response.item.artists[0].name,\n            releaseDate: response.item.album.release_date\n          }\n        });\n      });\n    };\n\n    this.formatReleaseDate = date => {\n      let selectMonth = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n      let month = selectMonth[parseInt(date.slice(5, 7) - 1)];\n      let day = date.slice(8, 10);\n      let year = date.slice(0, 4);\n      return month + \" \" + day + \", \" + year;\n    };\n\n    this.getWiki = term => {\n      const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n      fetch(proxyurl + searchUrl + \"/\" + term).then(response => response.json()).then(contents => {\n        this.setState({\n          description: contents[2][0]\n        });\n      }).catch(() => console.log(\"Canâ€™t access \" + searchUrl + \" response. Blocked by browser?\"));\n    };\n\n    const params = this.getHashParams();\n    const token = params.access_token;\n\n    if (token) {\n      spotifyApi.setAccessToken(token);\n    }\n\n    this.state = {\n      loggedIn: token ? true : false,\n      nowPlaying: {\n        name: '',\n        artist: '',\n        albumArt: '',\n        releaseDate: ''\n      },\n      description: ''\n    };\n  } //Function given in Spotify API used to create a random hash for the access token\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"songInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, !this.state.loggedIn && React.createElement(\"a\", {\n      href: \"http://localhost:8888\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \" Login to Spotify \"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, this.state.nowPlaying.name && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Now Playing: \", this.state.nowPlaying.name)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, this.state.nowPlaying.artist && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Artist: \", this.state.nowPlaying.artist)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, this.state.nowPlaying.albumArt && React.createElement(\"img\", {\n      src: this.state.nowPlaying.albumArt,\n      alt: \"Album art not found\",\n      style: {\n        height: 150\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, this.state.nowPlaying.releaseDate && this.formatReleaseDate(this.state.nowPlaying.releaseDate)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, this.state.nowPlaying.artist && React.createElement(\"button\", {\n      onClick: () => this.getWiki(this.state.nowPlaying.artist),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Artist Description\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, this.state.description)), this.state.loggedIn && React.createElement(\"button\", {\n      id: \"spotify-button\",\n      onClick: () => this.getNowPlaying(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Check Now Playing\"));\n  }\n\n}\n\nexport default SongInfo;","map":{"version":3,"sources":["/Users/taylorsimpson/Documents/react/song-analysis/client/src/components/SongInfo.js"],"names":["React","Component","SpotifyWebApi","spotifyApi","searchUrl","SongInfo","constructor","getHashParams","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","getNowPlaying","getMyCurrentPlaybackState","then","response","setState","nowPlaying","name","item","albumArt","album","images","url","artist","artists","releaseDate","release_date","formatReleaseDate","date","selectMonth","month","parseInt","slice","day","year","getWiki","term","proxyurl","fetch","json","contents","description","catch","console","log","params","token","access_token","setAccessToken","state","loggedIn","render","height"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\n// Wikipedia API link\nconst searchUrl = \"https://en.wikipedia.org/w/api.php?action=opensearch&limit=20&format=json&search=\";\n\nclass SongInfo extends Component {\n    constructor() {\n        super();\n        const params = this.getHashParams();\n        const token = params.access_token;\n        if (token) {\n            spotifyApi.setAccessToken(token);\n        }\n\n        this.state = {\n            loggedIn: token ? true : false,\n            nowPlaying: {\n                name: '',\n                artist: '',\n                albumArt: '',\n                releaseDate: ''\n            },\n            description: ''\n        }\n    }\n\n    //Function given in Spotify API used to create a random hash for the access token\n    getHashParams = () => {\n        var hashParams = {};\n        var e, r = /([^&;=]+)=?([^&;]*)/g,\n            q = window.location.hash.substring(1);\n        e = r.exec(q)\n        while (e) {\n            hashParams[e[1]] = decodeURIComponent(e[2]);\n            e = r.exec(q);\n        }\n        return hashParams;\n    }\n\n    //Setting the state of the current song details from the Spotify API\n    getNowPlaying = () => {\n        spotifyApi.getMyCurrentPlaybackState()\n            .then((response) => {\n                this.setState({\n                    nowPlaying: {\n                        name: response.item.name,\n                        albumArt: response.item.album.images[0].url,\n                        artist: response.item.artists[0].name,\n                        releaseDate: response.item.album.release_date\n                    }\n                });\n            })\n    }\n\n    //Formatting the realse date from dd/mm/yyyy to mm dd, yyyy \n    formatReleaseDate = (date) => {\n        let selectMonth = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n        let month = selectMonth[parseInt(date.slice(5, 7) - 1)]\n        let day = date.slice(8, 10)\n        let year = date.slice(0, 4)\n        return month + \" \" + day + \", \" + year;\n    }\n\n    // Takes in an artist name as a search term and uses the \n    // Wikipedia API to get a JSON response of a description\n    getWiki = (term) => {\n        const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n        fetch(proxyurl + searchUrl + \"/\" + term)\n            .then(response => response.json())\n            .then(contents => {\n                this.setState({\n                    description: contents[2][0]\n                });\n            }).catch(() => console.log(\"Canâ€™t access \" + searchUrl + \" response. Blocked by browser?\"))\n    }\n\n    render() {\n        return (\n            <div className=\"songInfo\" >\n\n                {!this.state.loggedIn && <a href='http://localhost:8888' > Login to Spotify </a>}\n\n                {/* Song name */}\n                <div>\n                    {this.state.nowPlaying.name && <p>Now Playing: {this.state.nowPlaying.name}</p>}\n                </div>\n\n                {/* Artist name */}\n                <div>\n                    {this.state.nowPlaying.artist && <p>Artist: {this.state.nowPlaying.artist}</p>}\n                </div>\n\n                {/* Checking to see if there is alubm art and then rendering it if true*/}\n                <div>\n                    {this.state.nowPlaying.albumArt && <img src={this.state.nowPlaying.albumArt} alt=\"Album art not found\" style={{ height: 150 }} />}\n                </div>\n\n                {/* Function call to format the realse date from dd/mm/yyyy to mm dd, yyyy */}\n                {/* && used to only show a date when it is available*/}\n                <div>\n                    {this.state.nowPlaying.releaseDate && this.formatReleaseDate(this.state.nowPlaying.releaseDate)}\n                </div>\n\n                {/* Calling a function to get the artist descriptoino form Wikipedia */}\n                <div>\n                    {this.state.nowPlaying.artist &&\n                        <button\n                            onClick={() => this.getWiki(this.state.nowPlaying.artist)}>\n                            Artist Description\n                        </button>\n                    }\n                </div>\n\n                {/* Rendering description */}\n                <div>\n                    <p>{this.state.description}</p>\n                </div>\n\n                {this.state.loggedIn &&\n                    <button id=\"spotify-button\"\n                        onClick={() => this.getNowPlaying()}>\n                        Check Now Playing\n                    </button>\n                }\n            </div>\n        );\n    }\n}\nexport default SongInfo;"]},"metadata":{},"sourceType":"module"}