{"ast":null,"code":"var _jsxFileName = \"/Users/taylorsimpson/Documents/react/song-analysis/client/src/components/SongInfo.js\";\nimport React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass SongInfo extends Component {\n  constructor() {\n    super();\n\n    this.getHashParams = () => {\n      var hashParams = {};\n      var e,\n          r = /([^&;=]+)=?([^&;]*)/g,\n          q = window.location.hash.substring(1);\n      e = r.exec(q);\n\n      while (e) {\n        hashParams[e[1]] = decodeURIComponent(e[2]);\n        e = r.exec(q);\n      }\n\n      return hashParams;\n    };\n\n    this.getNowPlaying = () => {\n      spotifyApi.getMyCurrentPlaybackState().then(response => {\n        const _response$item = response.item,\n              _response$item$id = _response$item.id,\n              id = _response$item$id === void 0 ? \"id\" : _response$item$id,\n              _response$item$name = _response$item.name,\n              name = _response$item$name === void 0 ? \"nn\" : _response$item$name,\n              _response$item$album = _response$item.album,\n              album = _response$item$album === void 0 ? \"na\" : _response$item$album,\n              _response$item$artist = _response$item.artists,\n              artists = _response$item$artist === void 0 ? \"naa\" : _response$item$artist;\n        this.setState({\n          currentlyPlaying: true,\n          nowPlaying: {\n            id: id,\n            name: name,\n            albumArt: album.images[0].url,\n            artist: artists[0].name,\n            releaseDate: album.release_date\n          }\n        });\n        console.log('song playing', this.state.currentlyPlaying);\n      }).catch(() => this.setState({\n        currentlyPlaying: false\n      }));\n    };\n\n    this.formatReleaseDate = date => {\n      let selectMonth = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n      let month = selectMonth[parseInt(date.slice(5, 7) - 1)];\n      let day = date.slice(8, 10);\n      let year = date.slice(0, 4);\n      return month + \" \" + day + \", \" + year;\n    };\n\n    this.getWiki = term => {\n      const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n      const url = \"https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro&explaintext&redirects=1&titles=\";\n      fetch(proxyurl + url + term) // https://cors-anywhere.herokuapp.com/https://example.com\n      .then(response => response.json()).then(contents => {\n        for (const key in contents.query.pages) {\n          const extractedDescription = contents.query.pages[key].extract;\n          this.setState({\n            description: extractedDescription\n          });\n        }\n      }).catch(() => console.log(\"Canâ€™t access \" + url + term + \" response.\"));\n    };\n\n    const params = this.getHashParams();\n    const token = params.access_token;\n\n    if (token) {\n      spotifyApi.setAccessToken(token);\n    }\n\n    this.state = {\n      loggedIn: !!token,\n      // true or false\n      currentlyPlaying: false,\n      nowPlaying: {\n        id: '',\n        name: '',\n        artist: '',\n        albumArt: '',\n        releaseDate: ''\n      },\n      description: ''\n    };\n  } //Function given in Spotify API used to create a random hash for the access token\n\n\n  componentDidMount() {\n    this.getNowPlaying();\n    this.getKey();\n  }\n\n  render() {\n    const _this$state$nowPlayin = this.state.nowPlaying,\n          name = _this$state$nowPlayin.name,\n          artist = _this$state$nowPlayin.artist,\n          albumArt = _this$state$nowPlayin.albumArt,\n          releaseDate = _this$state$nowPlayin.releaseDate;\n    return React.createElement(\"div\", {\n      className: \"songInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, !this.state.currentlyPlaying && this.state.loggedIn ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"No music playing\") : '', !this.state.loggedIn && React.createElement(\"a\", {\n      href: \"http://localhost:8888\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \" Login to Spotify \"), this.state.loggedIn && this.state.currentlyPlaying && React.createElement(\"button\", {\n      id: \"spotify-button\",\n      onClick: () => this.getNowPlaying(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Check Now Playing\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, id && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Song ID: \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, id))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, name && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Now Playing: \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, name))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, artist && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Artist: \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, artist))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, albumArt && React.createElement(\"img\", {\n      src: albumArt,\n      alt: \"Album art not found\",\n      style: {\n        height: 150\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, releaseDate && this.formatReleaseDate(releaseDate)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, artist && React.createElement(\"button\", {\n      className: \"description-button\",\n      onClick: () => this.getWiki(artist),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Artist Description\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \" \", this.state.description)));\n  }\n\n}\n\nexport default SongInfo;","map":{"version":3,"sources":["/Users/taylorsimpson/Documents/react/song-analysis/client/src/components/SongInfo.js"],"names":["React","Component","SpotifyWebApi","spotifyApi","SongInfo","constructor","getHashParams","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","getNowPlaying","getMyCurrentPlaybackState","then","response","item","id","name","album","artists","setState","currentlyPlaying","nowPlaying","albumArt","images","url","artist","releaseDate","release_date","console","log","state","catch","formatReleaseDate","date","selectMonth","month","parseInt","slice","day","year","getWiki","term","proxyurl","fetch","json","contents","key","query","pages","extractedDescription","extract","description","params","token","access_token","setAccessToken","loggedIn","componentDidMount","getKey","render","height"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass SongInfo extends Component {\n    constructor() {\n        super();\n        const params = this.getHashParams();\n        const token = params.access_token;\n        if (token) {\n            spotifyApi.setAccessToken(token);\n        }\n\n        this.state = {\n            loggedIn: !!token, // true or false\n            currentlyPlaying: false,\n            nowPlaying: {\n                id: '',\n                name: '',\n                artist: '',\n                albumArt: '',\n                releaseDate: ''\n            },\n            description: ''\n        }\n    }\n\n    //Function given in Spotify API used to create a random hash for the access token\n    getHashParams = () => {\n        var hashParams = {};\n        var e, r = /([^&;=]+)=?([^&;]*)/g,\n            q = window.location.hash.substring(1);\n        e = r.exec(q)\n        while (e) {\n            hashParams[e[1]] = decodeURIComponent(e[2]);\n            e = r.exec(q);\n        }\n        return hashParams;\n    }\n\n    // getKey = () => {\n    //     spotifyApi.getAudioAnalysisForTrack(trackId, callback)()\n    //         .then((response) => {\n    //             console.log(\"GET KEY\", response)\n    //         }).catch(() => console.log('It did not get the key'));\n    // }\n\n\n\n    //Setting the state of the current song details from the Spotify API\n    getNowPlaying = () => {\n        spotifyApi.getMyCurrentPlaybackState()\n            .then((response) => {\n                const { id = \"id\", name = \"nn\", album = \"na\", artists = \"naa\" } = response.item;\n                this.setState({\n                    currentlyPlaying: true,\n                    nowPlaying: {\n                        id: id,\n                        name: name,\n                        albumArt: album.images[0].url,\n                        artist: artists[0].name,\n                        releaseDate: album.release_date\n                    }\n                })\n                console.log('song playing', this.state.currentlyPlaying)\n            }).catch(() => (this.setState({\n                currentlyPlaying: false\n            })));\n    }\n\n    //Formatting the realse date from dd/mm/yyyy to mm dd, yyyy \n    formatReleaseDate = (date) => {\n        let selectMonth = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n        let month = selectMonth[parseInt(date.slice(5, 7) - 1)]\n        let day = date.slice(8, 10)\n        let year = date.slice(0, 4)\n        return month + \" \" + day + \", \" + year;\n    }\n\n    // Takes in an artist name as a search term and uses the \n    // Wikipedia API to get a JSON response of a description\n\n    getWiki = (term) => {\n        const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n        const url = \"https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro&explaintext&redirects=1&titles=\"\n        fetch(proxyurl + url + term) // https://cors-anywhere.herokuapp.com/https://example.com\n            .then(response => response.json())\n            .then(contents => {\n                for (const key in contents.query.pages) {\n                    const extractedDescription = contents.query.pages[key].extract;\n                    this.setState({\n                        description: extractedDescription\n                    });\n                }\n\n            }).catch(() => console.log(\"Canâ€™t access \" + url + term + \" response.\"))\n    }\n\n    componentDidMount() {\n        this.getNowPlaying();\n        this.getKey()\n    }\n\n\n\n    render() {\n        const { name, artist, albumArt, releaseDate } = this.state.nowPlaying;\n        return (\n            <div className=\"songInfo\" >\n\n                {!this.state.currentlyPlaying && this.state.loggedIn ? <p>No music playing</p> : ''}\n\n                {!this.state.loggedIn && <a href='http://localhost:8888' > Login to Spotify </a>}\n\n                {this.state.loggedIn && this.state.currentlyPlaying &&\n                    <button\n                        id=\"spotify-button\"\n                        onClick={() => this.getNowPlaying()}>\n                        Check Now Playing\n                    </button>\n                }\n\n                {/* Song id */}\n                <div>\n                    {id && <p>Song ID: <b>{id}</b></p>}\n                </div>\n\n                {/* Song name */}\n                <div>\n                    {name && <p>Now Playing: <b>{name}</b></p>}\n                </div>\n\n                {/* Artist name */}\n                <div>\n                    {artist && <p>Artist: <b>{artist}</b></p>}\n                </div>\n\n                {/* Checking to see if there is alubm art and then rendering it if true*/}\n                <div>\n                    {albumArt && <img src={albumArt} alt=\"Album art not found\" style={{ height: 150 }} />}\n                </div>\n\n                {/* Function call to format the realse date from dd/mm/yyyy to mm dd, yyyy */}\n                {/* && used to only show a date when it is available */}\n                <div>\n                    {releaseDate && this.formatReleaseDate(releaseDate)}\n                </div>\n\n                {/* Calling a function to get the artist descriptoino form Wikipedia */}\n                <div>\n                    {artist &&\n                        <button\n                            className=\"description-button\"\n                            onClick={() => this.getWiki(artist)}>\n                            Artist Description\n                        </button>\n                    }\n                </div>\n\n                {/* Rendering description */}\n                <div>\n                    <p className=\"description\"> {this.state.description}</p>\n                </div>\n            </div>\n        );\n    }\n}\nexport default SongInfo;"]},"metadata":{},"sourceType":"module"}